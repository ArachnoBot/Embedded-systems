
MotionAlarmMega.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000b56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ae2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800200  00800200  00000b56  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b56  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018e8  00000000  00000000  00000ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f3d  00000000  00000000  00002588  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c1c  00000000  00000000  000034c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f8  00000000  00000000  000040e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000785  00000000  00000000  000042dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c20  00000000  00000000  00004a61  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00005681  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	e9 c0       	rjmp	.+466    	; 0x1d4 <__ctors_end>
   2:	00 00       	nop
   4:	f9 c0       	rjmp	.+498    	; 0x1f8 <__bad_interrupt>
   6:	00 00       	nop
   8:	f7 c0       	rjmp	.+494    	; 0x1f8 <__bad_interrupt>
   a:	00 00       	nop
   c:	f5 c0       	rjmp	.+490    	; 0x1f8 <__bad_interrupt>
   e:	00 00       	nop
  10:	f3 c0       	rjmp	.+486    	; 0x1f8 <__bad_interrupt>
  12:	00 00       	nop
  14:	f1 c0       	rjmp	.+482    	; 0x1f8 <__bad_interrupt>
  16:	00 00       	nop
  18:	ef c0       	rjmp	.+478    	; 0x1f8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	ed c0       	rjmp	.+474    	; 0x1f8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	eb c0       	rjmp	.+470    	; 0x1f8 <__bad_interrupt>
  22:	00 00       	nop
  24:	e9 c0       	rjmp	.+466    	; 0x1f8 <__bad_interrupt>
  26:	00 00       	nop
  28:	e7 c0       	rjmp	.+462    	; 0x1f8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	e5 c0       	rjmp	.+458    	; 0x1f8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	e3 c0       	rjmp	.+454    	; 0x1f8 <__bad_interrupt>
  32:	00 00       	nop
  34:	e1 c0       	rjmp	.+450    	; 0x1f8 <__bad_interrupt>
  36:	00 00       	nop
  38:	df c0       	rjmp	.+446    	; 0x1f8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	dd c0       	rjmp	.+442    	; 0x1f8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	db c0       	rjmp	.+438    	; 0x1f8 <__bad_interrupt>
  42:	00 00       	nop
  44:	d9 c0       	rjmp	.+434    	; 0x1f8 <__bad_interrupt>
  46:	00 00       	nop
  48:	d7 c0       	rjmp	.+430    	; 0x1f8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	d5 c0       	rjmp	.+426    	; 0x1f8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	d3 c0       	rjmp	.+422    	; 0x1f8 <__bad_interrupt>
  52:	00 00       	nop
  54:	d1 c0       	rjmp	.+418    	; 0x1f8 <__bad_interrupt>
  56:	00 00       	nop
  58:	cf c0       	rjmp	.+414    	; 0x1f8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	cd c0       	rjmp	.+410    	; 0x1f8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	cb c0       	rjmp	.+406    	; 0x1f8 <__bad_interrupt>
  62:	00 00       	nop
  64:	c9 c0       	rjmp	.+402    	; 0x1f8 <__bad_interrupt>
  66:	00 00       	nop
  68:	c7 c0       	rjmp	.+398    	; 0x1f8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	c5 c0       	rjmp	.+394    	; 0x1f8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	c3 c0       	rjmp	.+390    	; 0x1f8 <__bad_interrupt>
  72:	00 00       	nop
  74:	c1 c0       	rjmp	.+386    	; 0x1f8 <__bad_interrupt>
  76:	00 00       	nop
  78:	bf c0       	rjmp	.+382    	; 0x1f8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	bd c0       	rjmp	.+378    	; 0x1f8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	bb c0       	rjmp	.+374    	; 0x1f8 <__bad_interrupt>
  82:	00 00       	nop
  84:	b9 c0       	rjmp	.+370    	; 0x1f8 <__bad_interrupt>
  86:	00 00       	nop
  88:	b7 c0       	rjmp	.+366    	; 0x1f8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	b5 c0       	rjmp	.+362    	; 0x1f8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	b3 c0       	rjmp	.+358    	; 0x1f8 <__bad_interrupt>
  92:	00 00       	nop
  94:	b1 c0       	rjmp	.+354    	; 0x1f8 <__bad_interrupt>
  96:	00 00       	nop
  98:	af c0       	rjmp	.+350    	; 0x1f8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	ad c0       	rjmp	.+346    	; 0x1f8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	ab c0       	rjmp	.+342    	; 0x1f8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	a9 c0       	rjmp	.+338    	; 0x1f8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	a7 c0       	rjmp	.+334    	; 0x1f8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	a5 c0       	rjmp	.+330    	; 0x1f8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	a3 c0       	rjmp	.+326    	; 0x1f8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	a1 c0       	rjmp	.+322    	; 0x1f8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	9f c0       	rjmp	.+318    	; 0x1f8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	3e c1       	rjmp	.+636    	; 0x33a <__vector_47>
  be:	00 00       	nop
  c0:	9b c0       	rjmp	.+310    	; 0x1f8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	99 c0       	rjmp	.+306    	; 0x1f8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	97 c0       	rjmp	.+302    	; 0x1f8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	95 c0       	rjmp	.+298    	; 0x1f8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	93 c0       	rjmp	.+294    	; 0x1f8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	91 c0       	rjmp	.+290    	; 0x1f8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	8f c0       	rjmp	.+286    	; 0x1f8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	8d c0       	rjmp	.+282    	; 0x1f8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	8b c0       	rjmp	.+278    	; 0x1f8 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	3c 01       	movw	r6, r24
  e6:	44 01       	movw	r8, r8
  e8:	44 01       	movw	r8, r8
  ea:	44 01       	movw	r8, r8
  ec:	3e 01       	movw	r6, r28
  ee:	44 01       	movw	r8, r8
  f0:	40 01       	movw	r8, r0
  f2:	42 01       	movw	r8, r4
  f4:	44 01       	movw	r8, r8
  f6:	44 01       	movw	r8, r8
  f8:	44 01       	movw	r8, r8
  fa:	44 01       	movw	r8, r8
  fc:	44 01       	movw	r8, r8
  fe:	44 01       	movw	r8, r8
 100:	44 01       	movw	r8, r8
 102:	44 01       	movw	r8, r8
 104:	44 01       	movw	r8, r8
 106:	44 01       	movw	r8, r8
 108:	44 01       	movw	r8, r8
 10a:	44 01       	movw	r8, r8
 10c:	44 01       	movw	r8, r8
 10e:	44 01       	movw	r8, r8
 110:	44 01       	movw	r8, r8
 112:	44 01       	movw	r8, r8
 114:	44 01       	movw	r8, r8
 116:	44 01       	movw	r8, r8
 118:	44 01       	movw	r8, r8
 11a:	44 01       	movw	r8, r8
 11c:	44 01       	movw	r8, r8
 11e:	44 01       	movw	r8, r8
 120:	44 01       	movw	r8, r8
 122:	44 01       	movw	r8, r8
 124:	44 01       	movw	r8, r8
 126:	44 01       	movw	r8, r8
 128:	44 01       	movw	r8, r8
 12a:	44 01       	movw	r8, r8
 12c:	44 01       	movw	r8, r8
 12e:	44 01       	movw	r8, r8
 130:	44 01       	movw	r8, r8
 132:	44 01       	movw	r8, r8
 134:	44 01       	movw	r8, r8
 136:	44 01       	movw	r8, r8
 138:	44 01       	movw	r8, r8
 13a:	44 01       	movw	r8, r8
 13c:	44 01       	movw	r8, r8
 13e:	44 01       	movw	r8, r8
 140:	44 01       	movw	r8, r8
 142:	44 01       	movw	r8, r8
 144:	44 01       	movw	r8, r8
 146:	44 01       	movw	r8, r8
 148:	44 01       	movw	r8, r8
 14a:	44 01       	movw	r8, r8
 14c:	44 01       	movw	r8, r8
 14e:	44 01       	movw	r8, r8
 150:	44 01       	movw	r8, r8
 152:	44 01       	movw	r8, r8
 154:	44 01       	movw	r8, r8
 156:	44 01       	movw	r8, r8
 158:	44 01       	movw	r8, r8
 15a:	44 01       	movw	r8, r8
 15c:	44 01       	movw	r8, r8
 15e:	44 01       	movw	r8, r8
 160:	44 01       	movw	r8, r8
 162:	44 01       	movw	r8, r8
 164:	34 01       	movw	r6, r8
 166:	44 01       	movw	r8, r8
 168:	44 01       	movw	r8, r8
 16a:	44 01       	movw	r8, r8
 16c:	36 01       	movw	r6, r12
 16e:	44 01       	movw	r8, r8
 170:	38 01       	movw	r6, r16
 172:	3a 01       	movw	r6, r20
 174:	44 01       	movw	r8, r8
 176:	44 01       	movw	r8, r8
 178:	44 01       	movw	r8, r8
 17a:	44 01       	movw	r8, r8
 17c:	44 01       	movw	r8, r8
 17e:	44 01       	movw	r8, r8
 180:	44 01       	movw	r8, r8
 182:	44 01       	movw	r8, r8
 184:	44 01       	movw	r8, r8
 186:	44 01       	movw	r8, r8
 188:	44 01       	movw	r8, r8
 18a:	44 01       	movw	r8, r8
 18c:	44 01       	movw	r8, r8
 18e:	44 01       	movw	r8, r8
 190:	44 01       	movw	r8, r8
 192:	44 01       	movw	r8, r8
 194:	44 01       	movw	r8, r8
 196:	44 01       	movw	r8, r8
 198:	44 01       	movw	r8, r8
 19a:	44 01       	movw	r8, r8
 19c:	44 01       	movw	r8, r8
 19e:	44 01       	movw	r8, r8
 1a0:	44 01       	movw	r8, r8
 1a2:	44 01       	movw	r8, r8
 1a4:	2c 01       	movw	r4, r24
 1a6:	44 01       	movw	r8, r8
 1a8:	44 01       	movw	r8, r8
 1aa:	44 01       	movw	r8, r8
 1ac:	2e 01       	movw	r4, r28
 1ae:	44 01       	movw	r8, r8
 1b0:	30 01       	movw	r6, r0
 1b2:	32 01       	movw	r6, r4
 1b4:	44 01       	movw	r8, r8
 1b6:	44 01       	movw	r8, r8
 1b8:	44 01       	movw	r8, r8
 1ba:	44 01       	movw	r8, r8
 1bc:	44 01       	movw	r8, r8
 1be:	44 01       	movw	r8, r8
 1c0:	44 01       	movw	r8, r8
 1c2:	44 01       	movw	r8, r8
 1c4:	26 01       	movw	r4, r12
 1c6:	44 01       	movw	r8, r8
 1c8:	44 01       	movw	r8, r8
 1ca:	44 01       	movw	r8, r8
 1cc:	46 01       	movw	r8, r12
 1ce:	44 01       	movw	r8, r8
 1d0:	28 01       	movw	r4, r16
 1d2:	2a 01       	movw	r4, r20

000001d4 <__ctors_end>:
 1d4:	11 24       	eor	r1, r1
 1d6:	1f be       	out	0x3f, r1	; 63
 1d8:	cf ef       	ldi	r28, 0xFF	; 255
 1da:	d1 e2       	ldi	r29, 0x21	; 33
 1dc:	de bf       	out	0x3e, r29	; 62
 1de:	cd bf       	out	0x3d, r28	; 61
 1e0:	00 e0       	ldi	r16, 0x00	; 0
 1e2:	0c bf       	out	0x3c, r16	; 60

000001e4 <__do_clear_bss>:
 1e4:	22 e0       	ldi	r18, 0x02	; 2
 1e6:	a0 e0       	ldi	r26, 0x00	; 0
 1e8:	b2 e0       	ldi	r27, 0x02	; 2
 1ea:	01 c0       	rjmp	.+2      	; 0x1ee <.do_clear_bss_start>

000001ec <.do_clear_bss_loop>:
 1ec:	1d 92       	st	X+, r1

000001ee <.do_clear_bss_start>:
 1ee:	a2 30       	cpi	r26, 0x02	; 2
 1f0:	b2 07       	cpc	r27, r18
 1f2:	e1 f7       	brne	.-8      	; 0x1ec <.do_clear_bss_loop>
 1f4:	1b d2       	rcall	.+1078   	; 0x62c <main>
 1f6:	73 c4       	rjmp	.+2278   	; 0xade <_exit>

000001f8 <__bad_interrupt>:
 1f8:	03 cf       	rjmp	.-506    	; 0x0 <__vectors>

000001fa <keypad_ScanKey>:

		M_ROW=0x0F;		  // After debounce time, perform the above operation
		var_keyPress_u8=M_COL & 0x0F;	  // to ensure the Key press.

	}while(var_keyPress_u8==0x0F);
}
 1fa:	20 e0       	ldi	r18, 0x00	; 0
 1fc:	9f ee       	ldi	r25, 0xEF	; 239
 1fe:	10 c0       	rjmp	.+32     	; 0x220 <keypad_ScanKey+0x26>
 200:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
 204:	e9 ef       	ldi	r30, 0xF9	; 249
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	31 97       	sbiw	r30, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <keypad_ScanKey+0xe>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <keypad_ScanKey+0x14>
 20e:	00 00       	nop
 210:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
 214:	8f 70       	andi	r24, 0x0F	; 15
 216:	8f 30       	cpi	r24, 0x0F	; 15
 218:	29 f4       	brne	.+10     	; 0x224 <keypad_ScanKey+0x2a>
 21a:	99 0f       	add	r25, r25
 21c:	9f 5f       	subi	r25, 0xFF	; 255
 21e:	2f 5f       	subi	r18, 0xFF	; 255
 220:	24 30       	cpi	r18, 0x04	; 4
 222:	70 f3       	brcs	.-36     	; 0x200 <keypad_ScanKey+0x6>
 224:	90 7f       	andi	r25, 0xF0	; 240
 226:	89 0f       	add	r24, r25
 228:	08 95       	ret

0000022a <KEYPAD_Init>:
 22a:	80 ef       	ldi	r24, 0xF0	; 240
 22c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x7c0107>
 230:	08 95       	ret

00000232 <KEYPAD_GetKey>:

	//KEYPAD_WaitForKeyRelease();    // Wait for the previous key release
	//DELAY_ms(1);

	//KEYPAD_WaitForKeyPress();      // Wait for the new key press
	var_keyPress_u8 = keypad_ScanKey();        // Scan for the key pressed.
 232:	e3 df       	rcall	.-58     	; 0x1fa <keypad_ScanKey>

	switch(var_keyPress_u8)                       // Decode the key
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	fc 01       	movw	r30, r24
 238:	e7 57       	subi	r30, 0x77	; 119
 23a:	f1 09       	sbc	r31, r1
 23c:	e8 37       	cpi	r30, 0x78	; 120
 23e:	f1 05       	cpc	r31, r1
 240:	18 f5       	brcc	.+70     	; 0x288 <KEYPAD_GetKey+0x56>
 242:	88 27       	eor	r24, r24
 244:	ee 58       	subi	r30, 0x8E	; 142
 246:	ff 4f       	sbci	r31, 0xFF	; 255
 248:	8f 4f       	sbci	r24, 0xFF	; 255
 24a:	32 c4       	rjmp	.+2148   	; 0xab0 <__tablejump2__>
	{
	case 0xe7: var_keyPress_u8='*'; break; 
 24c:	8a e2       	ldi	r24, 0x2A	; 42
 24e:	08 95       	ret
	case 0xeb: var_keyPress_u8='7'; break; 
	case 0xed: var_keyPress_u8='4'; break; 
 250:	84 e3       	ldi	r24, 0x34	; 52
 252:	08 95       	ret
	case 0xee: var_keyPress_u8='1'; break; 
 254:	81 e3       	ldi	r24, 0x31	; 49
 256:	08 95       	ret
	case 0xd7: var_keyPress_u8='0'; break; 
 258:	80 e3       	ldi	r24, 0x30	; 48
 25a:	08 95       	ret
	case 0xdb: var_keyPress_u8='8'; break; 
 25c:	88 e3       	ldi	r24, 0x38	; 56
 25e:	08 95       	ret
	case 0xdd: var_keyPress_u8='5'; break; 
 260:	85 e3       	ldi	r24, 0x35	; 53
 262:	08 95       	ret
	case 0xde: var_keyPress_u8='2'; break; 
 264:	82 e3       	ldi	r24, 0x32	; 50
 266:	08 95       	ret
	case 0xb7: var_keyPress_u8='#'; break; 
 268:	83 e2       	ldi	r24, 0x23	; 35
 26a:	08 95       	ret
	case 0xbb: var_keyPress_u8='9'; break; 
 26c:	89 e3       	ldi	r24, 0x39	; 57
 26e:	08 95       	ret
	case 0xbd: var_keyPress_u8='6'; break; 
 270:	86 e3       	ldi	r24, 0x36	; 54
 272:	08 95       	ret
	case 0xbe: var_keyPress_u8='3'; break; 
 274:	83 e3       	ldi	r24, 0x33	; 51
 276:	08 95       	ret
	case 0x77: var_keyPress_u8='D'; break;  
 278:	84 e4       	ldi	r24, 0x44	; 68
 27a:	08 95       	ret
	case 0x7b: var_keyPress_u8='C'; break;  
 27c:	83 e4       	ldi	r24, 0x43	; 67
 27e:	08 95       	ret
	case 0x7d: var_keyPress_u8='B'; break;  
 280:	82 e4       	ldi	r24, 0x42	; 66
 282:	08 95       	ret
	case 0x7e: var_keyPress_u8='A'; break;  
 284:	81 e4       	ldi	r24, 0x41	; 65
 286:	08 95       	ret
	default  : var_keyPress_u8='z'; break;
 288:	8a e7       	ldi	r24, 0x7A	; 122
 28a:	08 95       	ret
	var_keyPress_u8 = keypad_ScanKey();        // Scan for the key pressed.

	switch(var_keyPress_u8)                       // Decode the key
	{
	case 0xe7: var_keyPress_u8='*'; break; 
	case 0xeb: var_keyPress_u8='7'; break; 
 28c:	87 e3       	ldi	r24, 0x37	; 55
	case 0x7d: var_keyPress_u8='B'; break;  
	case 0x7e: var_keyPress_u8='A'; break;  
	default  : var_keyPress_u8='z'; break;
	}
	return(var_keyPress_u8);                      // Return the key
}
 28e:	08 95       	ret

00000290 <savePassword>:
void ledon() {
	PORTB |= (1 << PB7);
}

void
savePassword(char password[]) {
 290:	ac 01       	movw	r20, r24
	for (uint8_t i = 0; i < 4; i++) {
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	12 c0       	rjmp	.+36     	; 0x2ba <savePassword+0x2a>
		while (EECR & (1 << EEPE));
 296:	f9 99       	sbic	0x1f, 1	; 31
 298:	fe cf       	rjmp	.-4      	; 0x296 <savePassword+0x6>
		EEAR = EEPROM_ADDRESS + i;
 29a:	29 2f       	mov	r18, r25
 29c:	30 e0       	ldi	r19, 0x00	; 0
 29e:	32 bd       	out	0x22, r19	; 34
 2a0:	21 bd       	out	0x21, r18	; 33
		EEDR = password[i];
 2a2:	fa 01       	movw	r30, r20
 2a4:	e2 0f       	add	r30, r18
 2a6:	f3 1f       	adc	r31, r19
 2a8:	20 81       	ld	r18, Z
 2aa:	20 bd       	out	0x20, r18	; 32
		EECR |= (1 << EEMPE);
 2ac:	2f b3       	in	r18, 0x1f	; 31
 2ae:	24 60       	ori	r18, 0x04	; 4
 2b0:	2f bb       	out	0x1f, r18	; 31
		EECR |= (1 << EEPE);
 2b2:	2f b3       	in	r18, 0x1f	; 31
 2b4:	22 60       	ori	r18, 0x02	; 2
 2b6:	2f bb       	out	0x1f, r18	; 31
	PORTB |= (1 << PB7);
}

void
savePassword(char password[]) {
	for (uint8_t i = 0; i < 4; i++) {
 2b8:	9f 5f       	subi	r25, 0xFF	; 255
 2ba:	94 30       	cpi	r25, 0x04	; 4
 2bc:	60 f3       	brcs	.-40     	; 0x296 <savePassword+0x6>
		EEDR = password[i];
		EECR |= (1 << EEMPE);
		EECR |= (1 << EEPE);
	}
	return;
}
 2be:	08 95       	ret

000002c0 <loadPassword>:

void
loadPassword(char password[4]) {
 2c0:	bc 01       	movw	r22, r24
	for (uint8_t i = 0; i < 4; i++) {
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	0f c0       	rjmp	.+30     	; 0x2e4 <loadPassword+0x24>
		while (EECR & (1 << EEPE));
 2c6:	f9 99       	sbic	0x1f, 1	; 31
 2c8:	fe cf       	rjmp	.-4      	; 0x2c6 <loadPassword+0x6>
		EEAR = EEPROM_ADDRESS + i;
 2ca:	29 2f       	mov	r18, r25
 2cc:	30 e0       	ldi	r19, 0x00	; 0
 2ce:	32 bd       	out	0x22, r19	; 34
 2d0:	21 bd       	out	0x21, r18	; 33
		EECR |= (1 << EERE);
 2d2:	4f b3       	in	r20, 0x1f	; 31
 2d4:	41 60       	ori	r20, 0x01	; 1
 2d6:	4f bb       	out	0x1f, r20	; 31
		password[i] = EEDR;
 2d8:	fb 01       	movw	r30, r22
 2da:	e2 0f       	add	r30, r18
 2dc:	f3 1f       	adc	r31, r19
 2de:	40 b5       	in	r20, 0x20	; 32
 2e0:	40 83       	st	Z, r20
	return;
}

void
loadPassword(char password[4]) {
	for (uint8_t i = 0; i < 4; i++) {
 2e2:	9f 5f       	subi	r25, 0xFF	; 255
 2e4:	94 30       	cpi	r25, 0x04	; 4
 2e6:	78 f3       	brcs	.-34     	; 0x2c6 <loadPassword+0x6>
		EEAR = EEPROM_ADDRESS + i;
		EECR |= (1 << EERE);
		password[i] = EEDR;
	}
	return;
}
 2e8:	08 95       	ret

000002ea <initSerial>:
// Function to initialize serial communication
void 
initSerial()
{
	// Set baud rate in the USART Baud Rate Registers
	UBRR1H = (uint8_t) (MYUBRR >> 8);
 2ea:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
	UBRR1L = (uint8_t) MYUBRR;
 2ee:	87 e0       	ldi	r24, 0x07	; 7
 2f0:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
	
	// Enable transmitter and receiver
	UCSR1B = (1 << TXEN1) | (1 << RXEN1);
 2f4:	88 e1       	ldi	r24, 0x18	; 24
 2f6:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7c00c9>
	
	// Set frame format: 8 data bits, 1 stop bit, no parity
    UCSR1C = (1 << UCSZ11) | (1 << UCSZ10);
 2fa:	86 e0       	ldi	r24, 0x06	; 6
 2fc:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7c00ca>
 300:	08 95       	ret

00000302 <initTimers>:
// Initialize timer4 and timer5
void 
initTimers() 
{		
	// Set timers 4 and 5 to normal mode
	TCCR4A = 0;
 302:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
	TCCR4B = 0;
 306:	a1 ea       	ldi	r26, 0xA1	; 161
 308:	b0 e0       	ldi	r27, 0x00	; 0
 30a:	1c 92       	st	X, r1
	TCCR5A = 0;
 30c:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
	TCCR5B = 0;
 310:	e1 e2       	ldi	r30, 0x21	; 33
 312:	f1 e0       	ldi	r31, 0x01	; 1
 314:	10 82       	st	Z, r1
	
	// Set timer prescalers to 256
	TCCR4B |= (1 << CS42);
 316:	8c 91       	ld	r24, X
 318:	84 60       	ori	r24, 0x04	; 4
 31a:	8c 93       	st	X, r24
	TCCR5B |= (1 << CS52);
 31c:	80 81       	ld	r24, Z
 31e:	84 60       	ori	r24, 0x04	; 4
 320:	80 83       	st	Z, r24
	
	OCR5A = 62500;
 322:	84 e2       	ldi	r24, 0x24	; 36
 324:	94 ef       	ldi	r25, 0xF4	; 244
 326:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
 32a:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
	TIMSK5 |= (1 << OCIE5A);
 32e:	e3 e7       	ldi	r30, 0x73	; 115
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	80 81       	ld	r24, Z
 334:	82 60       	ori	r24, 0x02	; 2
 336:	80 83       	st	Z, r24
 338:	08 95       	ret

0000033a <__vector_47>:
}

ISR(TIMER5_COMPA_vect) {
 33a:	1f 92       	push	r1
 33c:	0f 92       	push	r0
 33e:	0f b6       	in	r0, 0x3f	; 63
 340:	0f 92       	push	r0
 342:	11 24       	eor	r1, r1
 344:	8f 93       	push	r24
	secondsElapsed++;
 346:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 34a:	8f 5f       	subi	r24, 0xFF	; 255
 34c:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
}
 350:	8f 91       	pop	r24
 352:	0f 90       	pop	r0
 354:	0f be       	out	0x3f, r0	; 63
 356:	0f 90       	pop	r0
 358:	1f 90       	pop	r1
 35a:	18 95       	reti

0000035c <enableBuzzer>:

void
enableBuzzer() {
	// Set timer 3 to fast PWM with ICR as TOP and a prescaler of 256
	TCCR3A |= (1 << COM3A1) | (1 << WGM31);
 35c:	e0 e9       	ldi	r30, 0x90	; 144
 35e:	f0 e0       	ldi	r31, 0x00	; 0
 360:	80 81       	ld	r24, Z
 362:	82 68       	ori	r24, 0x82	; 130
 364:	80 83       	st	Z, r24
	TCCR3B |= (1 << WGM32) | (1 << WGM33) | (1 << CS32);
 366:	e1 e9       	ldi	r30, 0x91	; 145
 368:	f0 e0       	ldi	r31, 0x00	; 0
 36a:	80 81       	ld	r24, Z
 36c:	8c 61       	ori	r24, 0x1C	; 28
 36e:	80 83       	st	Z, r24
		
	// Set ICR3 based on desired frequency
	// ICR3 should be (16000000/256)/frequency
	ICR3 = 125;
 370:	8d e7       	ldi	r24, 0x7D	; 125
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__TEXT_REGION_LENGTH__+0x7c0097>
 378:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__TEXT_REGION_LENGTH__+0x7c0096>
 37c:	08 95       	ret

0000037e <disableBuzzer>:

// Turns the buzzer off;
void
disableBuzzer() {
	// Reset all timer 3 values to stop the buzzer
	TCCR3A = 0;
 37e:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
	TCCR3B = 0;
 382:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <__TEXT_REGION_LENGTH__+0x7c0091>
	ICR3 = 0;
 386:	10 92 97 00 	sts	0x0097, r1	; 0x800097 <__TEXT_REGION_LENGTH__+0x7c0097>
 38a:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <__TEXT_REGION_LENGTH__+0x7c0096>
 38e:	08 95       	ret

00000390 <receiveData>:
}

// Receive a byte from the atmega358p controlling the LCD, waiting for the
// message as many milliseconds as the parameter "timeout" determines
unsigned char
receiveData(uint16_t timeout) {
 390:	ac 01       	movw	r20, r24
	uint16_t timeElapsed = 0;
 392:	20 e0       	ldi	r18, 0x00	; 0
 394:	30 e0       	ldi	r19, 0x00	; 0
	while (!(UCSR1A & (1 << RXC1)))
 396:	0b c0       	rjmp	.+22     	; 0x3ae <receiveData+0x1e>
	{
		timeElapsed += 1;
 398:	2f 5f       	subi	r18, 0xFF	; 255
 39a:	3f 4f       	sbci	r19, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 39c:	8f e9       	ldi	r24, 0x9F	; 159
 39e:	9f e0       	ldi	r25, 0x0F	; 15
 3a0:	01 97       	sbiw	r24, 0x01	; 1
 3a2:	f1 f7       	brne	.-4      	; 0x3a0 <receiveData+0x10>
 3a4:	00 c0       	rjmp	.+0      	; 0x3a6 <receiveData+0x16>
 3a6:	00 00       	nop
		_delay_ms(1);
		if (timeElapsed > timeout)
 3a8:	42 17       	cp	r20, r18
 3aa:	53 07       	cpc	r21, r19
 3ac:	38 f0       	brcs	.+14     	; 0x3bc <receiveData+0x2c>
// Receive a byte from the atmega358p controlling the LCD, waiting for the
// message as many milliseconds as the parameter "timeout" determines
unsigned char
receiveData(uint16_t timeout) {
	uint16_t timeElapsed = 0;
	while (!(UCSR1A & (1 << RXC1)))
 3ae:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
 3b2:	99 23       	and	r25, r25
 3b4:	8c f7       	brge	.-30     	; 0x398 <receiveData+0x8>
		if (timeElapsed > timeout)
		{
			return 255;
		}
	}
	return UDR1;
 3b6:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
 3ba:	08 95       	ret
	{
		timeElapsed += 1;
		_delay_ms(1);
		if (timeElapsed > timeout)
		{
			return 255;
 3bc:	8f ef       	ldi	r24, 0xFF	; 255
		}
	}
	return UDR1;
}
 3be:	08 95       	ret

000003c0 <sendData>:
// Send a byte to the atmega358p controlling the LCD
void 
sendData(uint8_t data)
{
	// Wait for empty transmit buffer
	while (!(UCSR1A & (1 << UDRE1))) {}
 3c0:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
 3c4:	95 ff       	sbrs	r25, 5
 3c6:	fc cf       	rjmp	.-8      	; 0x3c0 <sendData>
	// Send the data
	UDR1 = data;
 3c8:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
 3cc:	08 95       	ret

000003ce <getDistance>:
}

// Get the motion sensor's measured distance (in cm)
uint8_t
getDistance()
{
 3ce:	cf 92       	push	r12
 3d0:	df 92       	push	r13
 3d2:	ef 92       	push	r14
 3d4:	ff 92       	push	r15
 3d6:	1f 93       	push	r17
 3d8:	cf 93       	push	r28
 3da:	df 93       	push	r29
	uint16_t tempDistance = 0;
	// Get the average of 5 readings to make them more reliable
	for (uint8_t i = 0; i < 5; i++) {
 3dc:	10 e0       	ldi	r17, 0x00	; 0

// Get the motion sensor's measured distance (in cm)
uint8_t
getDistance()
{
	uint16_t tempDistance = 0;
 3de:	c0 e0       	ldi	r28, 0x00	; 0
 3e0:	d0 e0       	ldi	r29, 0x00	; 0
	// Get the average of 5 readings to make them more reliable
	for (uint8_t i = 0; i < 5; i++) {
 3e2:	30 c0       	rjmp	.+96     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
		// Give a 15 us pulse to trigger pin
		PORTE &= ~(1 << TRIGGER_PIN);
 3e4:	8e b1       	in	r24, 0x0e	; 14
 3e6:	8f 7e       	andi	r24, 0xEF	; 239
 3e8:	8e b9       	out	0x0e, r24	; 14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ea:	8a e0       	ldi	r24, 0x0A	; 10
 3ec:	8a 95       	dec	r24
 3ee:	f1 f7       	brne	.-4      	; 0x3ec <getDistance+0x1e>
 3f0:	00 c0       	rjmp	.+0      	; 0x3f2 <getDistance+0x24>
		_delay_us(2);
		PORTE |= (1 << TRIGGER_PIN);
 3f2:	8e b1       	in	r24, 0x0e	; 14
 3f4:	80 61       	ori	r24, 0x10	; 16
 3f6:	8e b9       	out	0x0e, r24	; 14
 3f8:	80 e5       	ldi	r24, 0x50	; 80
 3fa:	8a 95       	dec	r24
 3fc:	f1 f7       	brne	.-4      	; 0x3fa <getDistance+0x2c>
		_delay_us(15);
		PORTE &= ~(1 << TRIGGER_PIN);
 3fe:	8e b1       	in	r24, 0x0e	; 14
 400:	8f 7e       	andi	r24, 0xEF	; 239
 402:	8e b9       	out	0x0e, r24	; 14
		// Wait until the echo pin goes high
		while (!(PINE & (1 << ECHO_PIN))) {}
 404:	65 9b       	sbis	0x0c, 5	; 12
 406:	fe cf       	rjmp	.-4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
		// Start measuring time
		TCNT4 = 0;
 408:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7c00a5>
 40c:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7c00a4>
		// Wait until output pulse goes low
		while ((PINE & (1 << ECHO_PIN))) {}
 410:	65 99       	sbic	0x0c, 5	; 12
 412:	fe cf       	rjmp	.-4      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
		// Calculate the distance, the multiplier 0.2755392 is 0.016 (ms per
		// timer tick) * 17.2212 (how many cm speed travels in a ms)
		tempDistance += TCNT4*0.2755392;
 414:	60 91 a4 00 	lds	r22, 0x00A4	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7c00a4>
 418:	70 91 a5 00 	lds	r23, 0x00A5	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7c00a5>
 41c:	80 e0       	ldi	r24, 0x00	; 0
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	56 d2       	rcall	.+1196   	; 0x8ce <__floatunsisf>
 422:	29 e7       	ldi	r18, 0x79	; 121
 424:	33 e1       	ldi	r19, 0x13	; 19
 426:	4d e8       	ldi	r20, 0x8D	; 141
 428:	5e e3       	ldi	r21, 0x3E	; 62
 42a:	df d2       	rcall	.+1470   	; 0x9ea <__mulsf3>
 42c:	6b 01       	movw	r12, r22
 42e:	7c 01       	movw	r14, r24
 430:	be 01       	movw	r22, r28
 432:	80 e0       	ldi	r24, 0x00	; 0
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	4b d2       	rcall	.+1174   	; 0x8ce <__floatunsisf>
 438:	a7 01       	movw	r20, r14
 43a:	96 01       	movw	r18, r12
 43c:	b8 d1       	rcall	.+880    	; 0x7ae <__addsf3>
 43e:	1b d2       	rcall	.+1078   	; 0x876 <__fixunssfsi>
 440:	eb 01       	movw	r28, r22
uint8_t
getDistance()
{
	uint16_t tempDistance = 0;
	// Get the average of 5 readings to make them more reliable
	for (uint8_t i = 0; i < 5; i++) {
 442:	1f 5f       	subi	r17, 0xFF	; 255
 444:	15 30       	cpi	r17, 0x05	; 5
		while ((PINE & (1 << ECHO_PIN))) {}
		// Calculate the distance, the multiplier 0.2755392 is 0.016 (ms per
		// timer tick) * 17.2212 (how many cm speed travels in a ms)
		tempDistance += TCNT4*0.2755392;
	}
	tempDistance /= 5;
 446:	70 f2       	brcs	.-100    	; 0x3e4 <getDistance+0x16>
 448:	9e 01       	movw	r18, r28
 44a:	ad ec       	ldi	r26, 0xCD	; 205
 44c:	bc ec       	ldi	r27, 0xCC	; 204
 44e:	38 d3       	rcall	.+1648   	; 0xac0 <__umulhisi3>
 450:	96 95       	lsr	r25
 452:	87 95       	ror	r24
 454:	96 95       	lsr	r25
 456:	87 95       	ror	r24
	// Make sure the 16 bit integer doesnt overflow the 8 bit one
	if (tempDistance > 255)
 458:	8f 3f       	cpi	r24, 0xFF	; 255
 45a:	91 05       	cpc	r25, r1
 45c:	19 f0       	breq	.+6      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 45e:	10 f0       	brcs	.+4      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
	{
		tempDistance = 255;
 460:	8f ef       	ldi	r24, 0xFF	; 255
 462:	90 e0       	ldi	r25, 0x00	; 0
	}
	uint8_t finalDistance = tempDistance;
	return finalDistance;
}
 464:	df 91       	pop	r29
 466:	cf 91       	pop	r28
 468:	1f 91       	pop	r17
 46a:	ff 90       	pop	r15
 46c:	ef 90       	pop	r14
 46e:	df 90       	pop	r13
 470:	cf 90       	pop	r12
 472:	08 95       	ret

00000474 <attemptConnection>:

uint8_t 
attemptConnection() {
 474:	cf 93       	push	r28
	uint8_t attempts = 0;
 476:	c0 e0       	ldi	r28, 0x00	; 0

	while (attempts < 50)
 478:	09 c0       	rjmp	.+18     	; 0x48c <attemptConnection+0x18>
	{
		uint8_t message = receiveData(200);
 47a:	88 ec       	ldi	r24, 0xC8	; 200
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	88 df       	rcall	.-240    	; 0x390 <receiveData>
		if (message == 111)
 480:	8f 36       	cpi	r24, 0x6F	; 111
		{
			sendData(111);
 482:	19 f4       	brne	.+6      	; 0x48a <attemptConnection+0x16>
 484:	9d df       	rcall	.-198    	; 0x3c0 <sendData>
			return 1;
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	04 c0       	rjmp	.+8      	; 0x492 <attemptConnection+0x1e>
		}
		attempts += 1;
 48a:	cf 5f       	subi	r28, 0xFF	; 255

uint8_t 
attemptConnection() {
	uint8_t attempts = 0;

	while (attempts < 50)
 48c:	c2 33       	cpi	r28, 0x32	; 50
 48e:	a8 f3       	brcs	.-22     	; 0x47a <attemptConnection+0x6>
			sendData(111);
			return 1;
		}
		attempts += 1;
	}
	return 0;
 490:	80 e0       	ldi	r24, 0x00	; 0
}
 492:	cf 91       	pop	r28
 494:	08 95       	ret

00000496 <setPassword>:

void
setPassword(char password[4])
{
 496:	0f 93       	push	r16
 498:	1f 93       	push	r17
 49a:	cf 93       	push	r28
 49c:	8c 01       	movw	r16, r24
	// Signal beginning of password
	sendData(INPUT);
 49e:	8a ef       	ldi	r24, 0xFA	; 250
 4a0:	8f df       	rcall	.-226    	; 0x3c0 <sendData>
	uint8_t inputsGiven = 0;
	
	// Get four inputs, adding them to the password array as well as sending them to the lcd
	while (1)
	{
		char input = KEYPAD_GetKey();
 4a2:	c0 e0       	ldi	r28, 0x00	; 0
 4a4:	c6 de       	rcall	.-628    	; 0x232 <KEYPAD_GetKey>
		
		// Check if input is a character between 0-9
		if (input > 47 && input < 58 && inputsGiven < 4)
 4a6:	90 ed       	ldi	r25, 0xD0	; 208
 4a8:	98 0f       	add	r25, r24
 4aa:	9a 30       	cpi	r25, 0x0A	; 10
 4ac:	90 f4       	brcc	.+36     	; 0x4d2 <setPassword+0x3c>
 4ae:	c4 30       	cpi	r28, 0x04	; 4
 4b0:	80 f4       	brcc	.+32     	; 0x4d2 <setPassword+0x3c>
		{
			password[inputsGiven] = input;
 4b2:	f8 01       	movw	r30, r16
 4b4:	ec 0f       	add	r30, r28
 4b6:	f1 1d       	adc	r31, r1
			inputsGiven += 1;
 4b8:	80 83       	st	Z, r24
			sendData(input);
 4ba:	cf 5f       	subi	r28, 0xFF	; 255
 4bc:	81 df       	rcall	.-254    	; 0x3c0 <sendData>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4be:	2f ef       	ldi	r18, 0xFF	; 255
 4c0:	87 e8       	ldi	r24, 0x87	; 135
 4c2:	93 e1       	ldi	r25, 0x13	; 19
 4c4:	21 50       	subi	r18, 0x01	; 1
 4c6:	80 40       	sbci	r24, 0x00	; 0
 4c8:	90 40       	sbci	r25, 0x00	; 0
 4ca:	e1 f7       	brne	.-8      	; 0x4c4 <setPassword+0x2e>
 4cc:	00 c0       	rjmp	.+0      	; 0x4ce <setPassword+0x38>
 4ce:	00 00       	nop
 4d0:	e9 cf       	rjmp	.-46     	; 0x4a4 <setPassword+0xe>
			_delay_ms(INPUTDELAY);
		}
		else if (input == '#' && inputsGiven == 4)
 4d2:	83 32       	cpi	r24, 0x23	; 35
 4d4:	89 f4       	brne	.+34     	; 0x4f8 <setPassword+0x62>
		{
			sendData('#');
 4d6:	c4 30       	cpi	r28, 0x04	; 4
		{
			// Ignore other inputs
		}
	}
	
	savePassword(password);
 4d8:	79 f4       	brne	.+30     	; 0x4f8 <setPassword+0x62>
 4da:	72 df       	rcall	.-284    	; 0x3c0 <sendData>
 4dc:	c8 01       	movw	r24, r16
	
	// Send SETPASSWORD to let LCD know we we're setting password
	sendData(SETPASSWORD);
 4de:	d8 de       	rcall	.-592    	; 0x290 <savePassword>
 4e0:	8b ef       	ldi	r24, 0xFB	; 251
 4e2:	6e df       	rcall	.-292    	; 0x3c0 <sendData>
 4e4:	2f ef       	ldi	r18, 0xFF	; 255
 4e6:	83 ed       	ldi	r24, 0xD3	; 211
 4e8:	90 e3       	ldi	r25, 0x30	; 48
 4ea:	21 50       	subi	r18, 0x01	; 1
 4ec:	80 40       	sbci	r24, 0x00	; 0
 4ee:	90 40       	sbci	r25, 0x00	; 0
 4f0:	e1 f7       	brne	.-8      	; 0x4ea <setPassword+0x54>
 4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <setPassword+0x5e>
 4f4:	00 00       	nop
		else if (input == '#' && inputsGiven == 4)
		{
			sendData('#');
			break;
		}
		else if (input == '*' && inputsGiven > 0)
 4f6:	10 c0       	rjmp	.+32     	; 0x518 <setPassword+0x82>
 4f8:	8a 32       	cpi	r24, 0x2A	; 42
 4fa:	a1 f6       	brne	.-88     	; 0x4a4 <setPassword+0xe>
 4fc:	cc 23       	and	r28, r28
		{
			inputsGiven -= 1;
 4fe:	91 f2       	breq	.-92     	; 0x4a4 <setPassword+0xe>
			sendData('*');
 500:	c1 50       	subi	r28, 0x01	; 1
 502:	5e df       	rcall	.-324    	; 0x3c0 <sendData>
 504:	2f ef       	ldi	r18, 0xFF	; 255
 506:	87 e8       	ldi	r24, 0x87	; 135
 508:	93 e1       	ldi	r25, 0x13	; 19
 50a:	21 50       	subi	r18, 0x01	; 1
 50c:	80 40       	sbci	r24, 0x00	; 0
 50e:	90 40       	sbci	r25, 0x00	; 0
 510:	e1 f7       	brne	.-8      	; 0x50a <setPassword+0x74>
 512:	00 c0       	rjmp	.+0      	; 0x514 <setPassword+0x7e>
 514:	00 00       	nop
 516:	c6 cf       	rjmp	.-116    	; 0x4a4 <setPassword+0xe>
	
	// Send SETPASSWORD to let LCD know we we're setting password
	sendData(SETPASSWORD);
	_delay_ms(1000);
	return;
}
 518:	cf 91       	pop	r28
 51a:	1f 91       	pop	r17
 51c:	0f 91       	pop	r16
 51e:	08 95       	ret

00000520 <checkPassword>:

uint8_t 
checkPassword(char password[4], uint8_t timeoutEnabled)
{
 520:	ef 92       	push	r14
 522:	ff 92       	push	r15
 524:	0f 93       	push	r16
 526:	1f 93       	push	r17
 528:	cf 93       	push	r28
 52a:	df 93       	push	r29
 52c:	00 d0       	rcall	.+0      	; 0x52e <checkPassword+0xe>
 52e:	1f 92       	push	r1
 530:	cd b7       	in	r28, 0x3d	; 61
 532:	de b7       	in	r29, 0x3e	; 62
 534:	7c 01       	movw	r14, r24
 536:	06 2f       	mov	r16, r22
	// Signal start of writing password
	sendData(INPUT);
 538:	8a ef       	ldi	r24, 0xFA	; 250
 53a:	42 df       	rcall	.-380    	; 0x3c0 <sendData>
	uint8_t passwordIsCorrect = 1;
	
	// Loop until user presses # after giving 4 inputs
	while (1)
	{
		char input = KEYPAD_GetKey();
 53c:	10 e0       	ldi	r17, 0x00	; 0
 53e:	79 de       	rcall	.-782    	; 0x232 <KEYPAD_GetKey>
		// If timeout is enabled and time goes over 10 seconds, inform the LCD
		if (timeoutEnabled && secondsElapsed > ALARM_DELAY) 
 540:	00 23       	and	r16, r16
 542:	99 f0       	breq	.+38     	; 0x56a <checkPassword+0x4a>
 544:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 548:	9b 30       	cpi	r25, 0x0B	; 11
		{
			sendData('#');
 54a:	78 f0       	brcs	.+30     	; 0x56a <checkPassword+0x4a>
 54c:	83 e2       	ldi	r24, 0x23	; 35
			sendData(ALARMTIMEOUT);
 54e:	38 df       	rcall	.-400    	; 0x3c0 <sendData>
 550:	8d ef       	ldi	r24, 0xFD	; 253
 552:	36 df       	rcall	.-404    	; 0x3c0 <sendData>
 554:	2f ef       	ldi	r18, 0xFF	; 255
 556:	83 ed       	ldi	r24, 0xD3	; 211
 558:	90 e3       	ldi	r25, 0x30	; 48
 55a:	21 50       	subi	r18, 0x01	; 1
 55c:	80 40       	sbci	r24, 0x00	; 0
 55e:	90 40       	sbci	r25, 0x00	; 0
 560:	e1 f7       	brne	.-8      	; 0x55a <checkPassword+0x3a>
 562:	00 c0       	rjmp	.+0      	; 0x564 <checkPassword+0x44>
 564:	00 00       	nop
			_delay_ms(1000);
			return 0;
 566:	80 e0       	ldi	r24, 0x00	; 0
 568:	56 c0       	rjmp	.+172    	; 0x616 <checkPassword+0xf6>
		}
		// Check if input is a character between 0-9, inform the LCD and add it to
		// to the password string
		else if (input > 47 && input < 58 && inputsGiven < 4)
 56a:	90 ed       	ldi	r25, 0xD0	; 208
 56c:	98 0f       	add	r25, r24
 56e:	9a 30       	cpi	r25, 0x0A	; 10
 570:	a8 f4       	brcc	.+42     	; 0x59c <checkPassword+0x7c>
 572:	14 30       	cpi	r17, 0x04	; 4
 574:	98 f4       	brcc	.+38     	; 0x59c <checkPassword+0x7c>
		{
			inputPassword[inputsGiven] = input;
 576:	e1 e0       	ldi	r30, 0x01	; 1
 578:	f0 e0       	ldi	r31, 0x00	; 0
 57a:	ec 0f       	add	r30, r28
 57c:	fd 1f       	adc	r31, r29
 57e:	e1 0f       	add	r30, r17
 580:	f1 1d       	adc	r31, r1
			inputsGiven += 1;
 582:	80 83       	st	Z, r24
			sendData(input);
 584:	1f 5f       	subi	r17, 0xFF	; 255
 586:	1c df       	rcall	.-456    	; 0x3c0 <sendData>
 588:	2f ef       	ldi	r18, 0xFF	; 255
 58a:	87 e8       	ldi	r24, 0x87	; 135
 58c:	93 e1       	ldi	r25, 0x13	; 19
 58e:	21 50       	subi	r18, 0x01	; 1
 590:	80 40       	sbci	r24, 0x00	; 0
 592:	90 40       	sbci	r25, 0x00	; 0
 594:	e1 f7       	brne	.-8      	; 0x58e <checkPassword+0x6e>
 596:	00 c0       	rjmp	.+0      	; 0x598 <checkPassword+0x78>
 598:	00 00       	nop
			_delay_ms(INPUTDELAY);
		}
		// If # is pressed, inform the LCD and break the input loop
		else if (input == '#' && inputsGiven == 4)
 59a:	d1 cf       	rjmp	.-94     	; 0x53e <checkPassword+0x1e>
 59c:	83 32       	cpi	r24, 0x23	; 35
 59e:	29 f4       	brne	.+10     	; 0x5aa <checkPassword+0x8a>
 5a0:	14 30       	cpi	r17, 0x04	; 4
		{
			sendData('#');
 5a2:	19 f4       	brne	.+6      	; 0x5aa <checkPassword+0x8a>
 5a4:	0d df       	rcall	.-486    	; 0x3c0 <sendData>
			// Ignore other inputs
		}
	}
	
	// Check if the given password matches the real one
	for (uint8_t i = 0; i < 4; i++)
 5a6:	20 e0       	ldi	r18, 0x00	; 0
		{
			sendData('#');
			break;
		}
		// If * is pressed, inform the LCD and go back one index
		else if (input == '*' && inputsGiven > 0)
 5a8:	20 c0       	rjmp	.+64     	; 0x5ea <checkPassword+0xca>
 5aa:	8a 32       	cpi	r24, 0x2A	; 42
 5ac:	41 f6       	brne	.-112    	; 0x53e <checkPassword+0x1e>
 5ae:	11 23       	and	r17, r17
		{
			inputsGiven -= 1;
 5b0:	31 f2       	breq	.-116    	; 0x53e <checkPassword+0x1e>
			sendData('*');
 5b2:	11 50       	subi	r17, 0x01	; 1
 5b4:	05 df       	rcall	.-502    	; 0x3c0 <sendData>
 5b6:	2f ef       	ldi	r18, 0xFF	; 255
 5b8:	87 e8       	ldi	r24, 0x87	; 135
 5ba:	93 e1       	ldi	r25, 0x13	; 19
 5bc:	21 50       	subi	r18, 0x01	; 1
 5be:	80 40       	sbci	r24, 0x00	; 0
 5c0:	90 40       	sbci	r25, 0x00	; 0
 5c2:	e1 f7       	brne	.-8      	; 0x5bc <checkPassword+0x9c>
 5c4:	00 c0       	rjmp	.+0      	; 0x5c6 <checkPassword+0xa6>
 5c6:	00 00       	nop
 5c8:	ba cf       	rjmp	.-140    	; 0x53e <checkPassword+0x1e>
	}
	
	// Check if the given password matches the real one
	for (uint8_t i = 0; i < 4; i++)
	{
		if (inputPassword[i] != password[i])
 5ca:	82 2f       	mov	r24, r18
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	e1 e0       	ldi	r30, 0x01	; 1
 5d0:	f0 e0       	ldi	r31, 0x00	; 0
 5d2:	ec 0f       	add	r30, r28
 5d4:	fd 1f       	adc	r31, r29
 5d6:	e8 0f       	add	r30, r24
 5d8:	f9 1f       	adc	r31, r25
 5da:	30 81       	ld	r19, Z
 5dc:	f7 01       	movw	r30, r14
 5de:	e8 0f       	add	r30, r24
 5e0:	f9 1f       	adc	r31, r25
 5e2:	80 81       	ld	r24, Z
 5e4:	38 13       	cpse	r19, r24
 5e6:	05 c0       	rjmp	.+10     	; 0x5f2 <checkPassword+0xd2>
			// Ignore other inputs
		}
	}
	
	// Check if the given password matches the real one
	for (uint8_t i = 0; i < 4; i++)
 5e8:	2f 5f       	subi	r18, 0xFF	; 255
 5ea:	24 30       	cpi	r18, 0x04	; 4
{
	// Signal start of writing password
	sendData(INPUT);
	char inputPassword[4];
	uint8_t inputsGiven = 0;
	uint8_t passwordIsCorrect = 1;
 5ec:	70 f3       	brcs	.-36     	; 0x5ca <checkPassword+0xaa>
 5ee:	11 e0       	ldi	r17, 0x01	; 1
			break;
		}
	}
	
	// Inform the LCD whether the password was correct or not
	if (passwordIsCorrect) {
 5f0:	01 c0       	rjmp	.+2      	; 0x5f4 <checkPassword+0xd4>
 5f2:	10 e0       	ldi	r17, 0x00	; 0
		sendData(CORRECTPASS);
 5f4:	11 23       	and	r17, r17
 5f6:	19 f0       	breq	.+6      	; 0x5fe <checkPassword+0xde>
 5f8:	8c ef       	ldi	r24, 0xFC	; 252
 5fa:	e2 de       	rcall	.-572    	; 0x3c0 <sendData>
	}
	else
	{
		sendData(WRONGPASS);	
 5fc:	02 c0       	rjmp	.+4      	; 0x602 <checkPassword+0xe2>
 5fe:	8e ef       	ldi	r24, 0xFE	; 254
 600:	df de       	rcall	.-578    	; 0x3c0 <sendData>
 602:	2f ef       	ldi	r18, 0xFF	; 255
 604:	83 ed       	ldi	r24, 0xD3	; 211
 606:	90 e3       	ldi	r25, 0x30	; 48
 608:	21 50       	subi	r18, 0x01	; 1
 60a:	80 40       	sbci	r24, 0x00	; 0
 60c:	90 40       	sbci	r25, 0x00	; 0
 60e:	e1 f7       	brne	.-8      	; 0x608 <checkPassword+0xe8>
 610:	00 c0       	rjmp	.+0      	; 0x612 <checkPassword+0xf2>
 612:	00 00       	nop
	}
	
	_delay_ms(1000);	// Delay so the message isnt immediately overwritten
	return passwordIsCorrect;	
 614:	81 2f       	mov	r24, r17
}
 616:	0f 90       	pop	r0
 618:	0f 90       	pop	r0
 61a:	0f 90       	pop	r0
 61c:	0f 90       	pop	r0
 61e:	df 91       	pop	r29
 620:	cf 91       	pop	r28
 622:	1f 91       	pop	r17
 624:	0f 91       	pop	r16
 626:	ff 90       	pop	r15
 628:	ef 90       	pop	r14
 62a:	08 95       	ret

0000062c <main>:

int
main(void)
{
 62c:	cf 93       	push	r28
 62e:	df 93       	push	r29
 630:	00 d0       	rcall	.+0      	; 0x632 <main+0x6>
 632:	1f 92       	push	r1
 634:	cd b7       	in	r28, 0x3d	; 61
 636:	de b7       	in	r29, 0x3e	; 62
	// Enable interrupts
	sei();
 638:	78 94       	sei
 63a:	2f ef       	ldi	r18, 0xFF	; 255
 63c:	87 ea       	ldi	r24, 0xA7	; 167
 63e:	91 e6       	ldi	r25, 0x61	; 97
 640:	21 50       	subi	r18, 0x01	; 1
 642:	80 40       	sbci	r24, 0x00	; 0
 644:	90 40       	sbci	r25, 0x00	; 0
 646:	e1 f7       	brne	.-8      	; 0x640 <main+0x14>
 648:	00 c0       	rjmp	.+0      	; 0x64a <main+0x1e>
 64a:	00 00       	nop
	_delay_ms(2000); // REMEMBER TO REMOVE
	
	// Set used pins as inputs/outputs
	DDRE |= (1 << TRIGGER_PIN);
 64c:	8d b1       	in	r24, 0x0d	; 13
 64e:	80 61       	ori	r24, 0x10	; 16
 650:	8d b9       	out	0x0d, r24	; 13
	DDRE &= ~(1 << ECHO_PIN);
 652:	8d b1       	in	r24, 0x0d	; 13
 654:	8f 7d       	andi	r24, 0xDF	; 223
 656:	8d b9       	out	0x0d, r24	; 13
	DDRE |= (1 << BUZZER_PIN);
 658:	8d b1       	in	r24, 0x0d	; 13
 65a:	88 60       	ori	r24, 0x08	; 8
 65c:	8d b9       	out	0x0d, r24	; 13
	
	// Create and load password from EEPROM
	char password[4];
	loadPassword(password);
 65e:	ce 01       	movw	r24, r28
 660:	01 96       	adiw	r24, 0x01	; 1
 662:	2e de       	rcall	.-932    	; 0x2c0 <loadPassword>
	
	// Initialize everything, connect to the LCD and set state as disarmed
	initSerial();
 664:	42 de       	rcall	.-892    	; 0x2ea <initSerial>
	initTimers();
 666:	4d de       	rcall	.-870    	; 0x302 <initTimers>
	KEYPAD_Init();
 668:	e0 dd       	rcall	.-1088   	; 0x22a <KEYPAD_Init>
 66a:	04 df       	rcall	.-504    	; 0x474 <attemptConnection>
	attemptConnection();
 66c:	2f ef       	ldi	r18, 0xFF	; 255
 66e:	89 e6       	ldi	r24, 0x69	; 105
 670:	98 e1       	ldi	r25, 0x18	; 24
 672:	21 50       	subi	r18, 0x01	; 1
 674:	80 40       	sbci	r24, 0x00	; 0
 676:	90 40       	sbci	r25, 0x00	; 0
 678:	e1 f7       	brne	.-8      	; 0x672 <main+0x46>
 67a:	00 c0       	rjmp	.+0      	; 0x67c <main+0x50>
 67c:	00 00       	nop
 67e:	88 ef       	ldi	r24, 0xF8	; 248
 680:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <state>
	_delay_ms(500);
	state = DISARMED;
 684:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <state>
	
	while (1) 
	{
		switch (state)
 688:	87 3f       	cpi	r24, 0xF7	; 247
 68a:	71 f1       	breq	.+92     	; 0x6e8 <main+0xbc>
 68c:	18 f4       	brcc	.+6      	; 0x694 <main+0x68>
 68e:	86 3f       	cpi	r24, 0xF6	; 246
 690:	41 f0       	breq	.+16     	; 0x6a2 <main+0x76>
 692:	f8 cf       	rjmp	.-16     	; 0x684 <main+0x58>
 694:	88 3f       	cpi	r24, 0xF8	; 248
 696:	09 f4       	brne	.+2      	; 0x69a <main+0x6e>
 698:	5c c0       	rjmp	.+184    	; 0x752 <main+0x126>
 69a:	89 3f       	cpi	r24, 0xF9	; 249
 69c:	09 f4       	brne	.+2      	; 0x6a0 <main+0x74>
 69e:	71 c0       	rjmp	.+226    	; 0x782 <main+0x156>
 6a0:	f1 cf       	rjmp	.-30     	; 0x684 <main+0x58>
 6a2:	86 ef       	ldi	r24, 0xF6	; 246
		{
			case ARMED:
				sendData(ARMED);
 6a4:	8d de       	rcall	.-742    	; 0x3c0 <sendData>
 6a6:	2f ef       	ldi	r18, 0xFF	; 255
 6a8:	87 e8       	ldi	r24, 0x87	; 135
 6aa:	93 e1       	ldi	r25, 0x13	; 19
 6ac:	21 50       	subi	r18, 0x01	; 1
 6ae:	80 40       	sbci	r24, 0x00	; 0
 6b0:	90 40       	sbci	r25, 0x00	; 0
 6b2:	e1 f7       	brne	.-8      	; 0x6ac <main+0x80>
 6b4:	00 c0       	rjmp	.+0      	; 0x6b6 <main+0x8a>
 6b6:	00 00       	nop
 6b8:	bc dd       	rcall	.-1160   	; 0x232 <KEYPAD_GetKey>
				_delay_ms(INPUTDELAY);
				while (1)
				{
					char key = KEYPAD_GetKey();
 6ba:	83 32       	cpi	r24, 0x23	; 35
					if (key == '#') {
 6bc:	71 f4       	brne	.+28     	; 0x6da <main+0xae>
 6be:	60 e0       	ldi	r22, 0x00	; 0
						if(checkPassword(password, 0))
 6c0:	ce 01       	movw	r24, r28
 6c2:	01 96       	adiw	r24, 0x01	; 1
 6c4:	2d df       	rcall	.-422    	; 0x520 <checkPassword>
 6c6:	88 23       	and	r24, r24
 6c8:	21 f0       	breq	.+8      	; 0x6d2 <main+0xa6>
 6ca:	88 ef       	ldi	r24, 0xF8	; 248
 6cc:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <state>
						{
							state = DISARMED;
 6d0:	d9 cf       	rjmp	.-78     	; 0x684 <main+0x58>
							break;
 6d2:	89 ef       	ldi	r24, 0xF9	; 249
						}
						else
						{
							state = TRIGGERED;
 6d4:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <state>
 6d8:	d5 cf       	rjmp	.-86     	; 0x684 <main+0x58>
							break;
 6da:	79 de       	rcall	.-782    	; 0x3ce <getDistance>
						}
					}
					else if (getDistance() < TRIGGER_DIST) {
 6dc:	8e 31       	cpi	r24, 0x1E	; 30
 6de:	60 f7       	brcc	.-40     	; 0x6b8 <main+0x8c>
 6e0:	87 ef       	ldi	r24, 0xF7	; 247
						state = MOVEMENT;
 6e2:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <state>
 6e6:	ce cf       	rjmp	.-100    	; 0x684 <main+0x58>
						break;
 6e8:	87 ef       	ldi	r24, 0xF7	; 247
					}
				}
				break;
			
			case MOVEMENT:
				sendData(MOVEMENT);
 6ea:	6a de       	rcall	.-812    	; 0x3c0 <sendData>
 6ec:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x7c0125>
				TCNT5 = 0;
 6f0:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x7c0124>
 6f4:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>
				secondsElapsed = 0;
 6f8:	2f ef       	ldi	r18, 0xFF	; 255
 6fa:	87 e8       	ldi	r24, 0x87	; 135
 6fc:	93 e1       	ldi	r25, 0x13	; 19
 6fe:	21 50       	subi	r18, 0x01	; 1
 700:	80 40       	sbci	r24, 0x00	; 0
 702:	90 40       	sbci	r25, 0x00	; 0
 704:	e1 f7       	brne	.-8      	; 0x6fe <main+0xd2>
 706:	00 c0       	rjmp	.+0      	; 0x708 <main+0xdc>
 708:	00 00       	nop
				_delay_ms(INPUTDELAY);
				while (1)
				{
					char key = KEYPAD_GetKey();
 70a:	93 dd       	rcall	.-1242   	; 0x232 <KEYPAD_GetKey>
 70c:	83 32       	cpi	r24, 0x23	; 35
					// Wait until # to start inputting password
					if (key == '#') {
 70e:	71 f4       	brne	.+28     	; 0x72c <main+0x100>
 710:	61 e0       	ldi	r22, 0x01	; 1
						if(checkPassword(password, 1))
 712:	ce 01       	movw	r24, r28
 714:	01 96       	adiw	r24, 0x01	; 1
 716:	04 df       	rcall	.-504    	; 0x520 <checkPassword>
 718:	88 23       	and	r24, r24
 71a:	21 f0       	breq	.+8      	; 0x724 <main+0xf8>
 71c:	88 ef       	ldi	r24, 0xF8	; 248
 71e:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <state>
						{
							state = DISARMED;
 722:	b0 cf       	rjmp	.-160    	; 0x684 <main+0x58>
							break;
 724:	89 ef       	ldi	r24, 0xF9	; 249
						}
						else
						{
							state = TRIGGERED;
 726:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <state>
 72a:	ac cf       	rjmp	.-168    	; 0x684 <main+0x58>
							break;
 72c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
						}
					}
					// If no input is given, trigger the alarm
					else if (secondsElapsed > ALARM_DELAY) {
 730:	8b 30       	cpi	r24, 0x0B	; 11
 732:	58 f3       	brcs	.-42     	; 0x70a <main+0xde>
 734:	8d ef       	ldi	r24, 0xFD	; 253
						sendData(ALARMTIMEOUT);
 736:	44 de       	rcall	.-888    	; 0x3c0 <sendData>
 738:	2f ef       	ldi	r18, 0xFF	; 255
 73a:	83 ed       	ldi	r24, 0xD3	; 211
 73c:	90 e3       	ldi	r25, 0x30	; 48
 73e:	21 50       	subi	r18, 0x01	; 1
 740:	80 40       	sbci	r24, 0x00	; 0
 742:	90 40       	sbci	r25, 0x00	; 0
 744:	e1 f7       	brne	.-8      	; 0x73e <main+0x112>
 746:	00 c0       	rjmp	.+0      	; 0x748 <main+0x11c>
 748:	00 00       	nop
 74a:	89 ef       	ldi	r24, 0xF9	; 249
						_delay_ms(1000);
						state = TRIGGERED;
 74c:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <state>
						break;
 750:	99 cf       	rjmp	.-206    	; 0x684 <main+0x58>
					}
				}
				break;
			
			case DISARMED:
				sendData(DISARMED);
 752:	88 ef       	ldi	r24, 0xF8	; 248
 754:	35 de       	rcall	.-918    	; 0x3c0 <sendData>
 756:	2f ef       	ldi	r18, 0xFF	; 255
 758:	87 e8       	ldi	r24, 0x87	; 135
 75a:	93 e1       	ldi	r25, 0x13	; 19
 75c:	21 50       	subi	r18, 0x01	; 1
 75e:	80 40       	sbci	r24, 0x00	; 0
 760:	90 40       	sbci	r25, 0x00	; 0
 762:	e1 f7       	brne	.-8      	; 0x75c <main+0x130>
 764:	00 c0       	rjmp	.+0      	; 0x766 <main+0x13a>
 766:	00 00       	nop
				_delay_ms(INPUTDELAY);
				while (1) 
				{
					char key = KEYPAD_GetKey();
 768:	64 dd       	rcall	.-1336   	; 0x232 <KEYPAD_GetKey>
 76a:	8a 32       	cpi	r24, 0x2A	; 42
					if (key == '*')
 76c:	21 f4       	brne	.+8      	; 0x776 <main+0x14a>
 76e:	ce 01       	movw	r24, r28
					{
						setPassword(password);
 770:	01 96       	adiw	r24, 0x01	; 1
 772:	91 de       	rcall	.-734    	; 0x496 <setPassword>
 774:	87 cf       	rjmp	.-242    	; 0x684 <main+0x58>
 776:	83 32       	cpi	r24, 0x23	; 35
						break;
 778:	b9 f7       	brne	.-18     	; 0x768 <main+0x13c>
					}
					else if (key == '#')
 77a:	86 ef       	ldi	r24, 0xF6	; 246
 77c:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <state>
					{
						state = ARMED;
 780:	81 cf       	rjmp	.-254    	; 0x684 <main+0x58>
						break;
 782:	ec dd       	rcall	.-1064   	; 0x35c <enableBuzzer>
					}
				}
				break;
			
			case TRIGGERED:
				enableBuzzer();
 784:	2f ef       	ldi	r18, 0xFF	; 255
 786:	83 ed       	ldi	r24, 0xD3	; 211
 788:	90 e3       	ldi	r25, 0x30	; 48
 78a:	21 50       	subi	r18, 0x01	; 1
 78c:	80 40       	sbci	r24, 0x00	; 0
 78e:	90 40       	sbci	r25, 0x00	; 0
 790:	e1 f7       	brne	.-8      	; 0x78a <main+0x15e>
 792:	00 c0       	rjmp	.+0      	; 0x794 <main+0x168>
 794:	00 00       	nop
 796:	60 e0       	ldi	r22, 0x00	; 0
				// Wait for the LCD to display the reason for the alarm
				_delay_ms(1000);
				
				// Loop until correct password is given, then disarm system
				while (checkPassword(password, 0) == 0);
 798:	ce 01       	movw	r24, r28
 79a:	01 96       	adiw	r24, 0x01	; 1
 79c:	c1 de       	rcall	.-638    	; 0x520 <checkPassword>
 79e:	88 23       	and	r24, r24
 7a0:	d1 f3       	breq	.-12     	; 0x796 <main+0x16a>
 7a2:	ed dd       	rcall	.-1062   	; 0x37e <disableBuzzer>
 7a4:	88 ef       	ldi	r24, 0xF8	; 248
				disableBuzzer();
 7a6:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <state>
				state = DISARMED;
 7aa:	6c cf       	rjmp	.-296    	; 0x684 <main+0x58>

000007ac <__subsf3>:
 7ac:	50 58       	subi	r21, 0x80	; 128

000007ae <__addsf3>:
 7ae:	bb 27       	eor	r27, r27
				break;
 7b0:	aa 27       	eor	r26, r26
 7b2:	0e d0       	rcall	.+28     	; 0x7d0 <__addsf3x>
 7b4:	e0 c0       	rjmp	.+448    	; 0x976 <__fp_round>
 7b6:	d1 d0       	rcall	.+418    	; 0x95a <__fp_pscA>
 7b8:	30 f0       	brcs	.+12     	; 0x7c6 <__addsf3+0x18>
 7ba:	d6 d0       	rcall	.+428    	; 0x968 <__fp_pscB>
 7bc:	20 f0       	brcs	.+8      	; 0x7c6 <__addsf3+0x18>
 7be:	31 f4       	brne	.+12     	; 0x7cc <__addsf3+0x1e>
 7c0:	9f 3f       	cpi	r25, 0xFF	; 255
 7c2:	11 f4       	brne	.+4      	; 0x7c8 <__addsf3+0x1a>
 7c4:	1e f4       	brtc	.+6      	; 0x7cc <__addsf3+0x1e>
 7c6:	c6 c0       	rjmp	.+396    	; 0x954 <__fp_nan>
 7c8:	0e f4       	brtc	.+2      	; 0x7cc <__addsf3+0x1e>
 7ca:	e0 95       	com	r30
 7cc:	e7 fb       	bst	r30, 7
 7ce:	bc c0       	rjmp	.+376    	; 0x948 <__fp_inf>

000007d0 <__addsf3x>:
 7d0:	e9 2f       	mov	r30, r25
 7d2:	e2 d0       	rcall	.+452    	; 0x998 <__fp_split3>
 7d4:	80 f3       	brcs	.-32     	; 0x7b6 <__addsf3+0x8>
 7d6:	ba 17       	cp	r27, r26
 7d8:	62 07       	cpc	r22, r18
 7da:	73 07       	cpc	r23, r19
 7dc:	84 07       	cpc	r24, r20
 7de:	95 07       	cpc	r25, r21
 7e0:	18 f0       	brcs	.+6      	; 0x7e8 <__addsf3x+0x18>
 7e2:	71 f4       	brne	.+28     	; 0x800 <__addsf3x+0x30>
 7e4:	9e f5       	brtc	.+102    	; 0x84c <__addsf3x+0x7c>
 7e6:	fa c0       	rjmp	.+500    	; 0x9dc <__fp_zero>
 7e8:	0e f4       	brtc	.+2      	; 0x7ec <__addsf3x+0x1c>
 7ea:	e0 95       	com	r30
 7ec:	0b 2e       	mov	r0, r27
 7ee:	ba 2f       	mov	r27, r26
 7f0:	a0 2d       	mov	r26, r0
 7f2:	0b 01       	movw	r0, r22
 7f4:	b9 01       	movw	r22, r18
 7f6:	90 01       	movw	r18, r0
 7f8:	0c 01       	movw	r0, r24
 7fa:	ca 01       	movw	r24, r20
 7fc:	a0 01       	movw	r20, r0
 7fe:	11 24       	eor	r1, r1
 800:	ff 27       	eor	r31, r31
 802:	59 1b       	sub	r21, r25
 804:	99 f0       	breq	.+38     	; 0x82c <__addsf3x+0x5c>
 806:	59 3f       	cpi	r21, 0xF9	; 249
 808:	50 f4       	brcc	.+20     	; 0x81e <__addsf3x+0x4e>
 80a:	50 3e       	cpi	r21, 0xE0	; 224
 80c:	68 f1       	brcs	.+90     	; 0x868 <__addsf3x+0x98>
 80e:	1a 16       	cp	r1, r26
 810:	f0 40       	sbci	r31, 0x00	; 0
 812:	a2 2f       	mov	r26, r18
 814:	23 2f       	mov	r18, r19
 816:	34 2f       	mov	r19, r20
 818:	44 27       	eor	r20, r20
 81a:	58 5f       	subi	r21, 0xF8	; 248
 81c:	f3 cf       	rjmp	.-26     	; 0x804 <__addsf3x+0x34>
 81e:	46 95       	lsr	r20
 820:	37 95       	ror	r19
 822:	27 95       	ror	r18
 824:	a7 95       	ror	r26
 826:	f0 40       	sbci	r31, 0x00	; 0
 828:	53 95       	inc	r21
 82a:	c9 f7       	brne	.-14     	; 0x81e <__addsf3x+0x4e>
 82c:	7e f4       	brtc	.+30     	; 0x84c <__addsf3x+0x7c>
 82e:	1f 16       	cp	r1, r31
 830:	ba 0b       	sbc	r27, r26
 832:	62 0b       	sbc	r22, r18
 834:	73 0b       	sbc	r23, r19
 836:	84 0b       	sbc	r24, r20
 838:	ba f0       	brmi	.+46     	; 0x868 <__addsf3x+0x98>
 83a:	91 50       	subi	r25, 0x01	; 1
 83c:	a1 f0       	breq	.+40     	; 0x866 <__addsf3x+0x96>
 83e:	ff 0f       	add	r31, r31
 840:	bb 1f       	adc	r27, r27
 842:	66 1f       	adc	r22, r22
 844:	77 1f       	adc	r23, r23
 846:	88 1f       	adc	r24, r24
 848:	c2 f7       	brpl	.-16     	; 0x83a <__addsf3x+0x6a>
 84a:	0e c0       	rjmp	.+28     	; 0x868 <__addsf3x+0x98>
 84c:	ba 0f       	add	r27, r26
 84e:	62 1f       	adc	r22, r18
 850:	73 1f       	adc	r23, r19
 852:	84 1f       	adc	r24, r20
 854:	48 f4       	brcc	.+18     	; 0x868 <__addsf3x+0x98>
 856:	87 95       	ror	r24
 858:	77 95       	ror	r23
 85a:	67 95       	ror	r22
 85c:	b7 95       	ror	r27
 85e:	f7 95       	ror	r31
 860:	9e 3f       	cpi	r25, 0xFE	; 254
 862:	08 f0       	brcs	.+2      	; 0x866 <__addsf3x+0x96>
 864:	b3 cf       	rjmp	.-154    	; 0x7cc <__addsf3+0x1e>
 866:	93 95       	inc	r25
 868:	88 0f       	add	r24, r24
 86a:	08 f0       	brcs	.+2      	; 0x86e <__addsf3x+0x9e>
 86c:	99 27       	eor	r25, r25
 86e:	ee 0f       	add	r30, r30
 870:	97 95       	ror	r25
 872:	87 95       	ror	r24
 874:	08 95       	ret

00000876 <__fixunssfsi>:
 876:	98 d0       	rcall	.+304    	; 0x9a8 <__fp_splitA>
 878:	88 f0       	brcs	.+34     	; 0x89c <__fixunssfsi+0x26>
 87a:	9f 57       	subi	r25, 0x7F	; 127
 87c:	90 f0       	brcs	.+36     	; 0x8a2 <__fixunssfsi+0x2c>
 87e:	b9 2f       	mov	r27, r25
 880:	99 27       	eor	r25, r25
 882:	b7 51       	subi	r27, 0x17	; 23
 884:	a0 f0       	brcs	.+40     	; 0x8ae <__fixunssfsi+0x38>
 886:	d1 f0       	breq	.+52     	; 0x8bc <__fixunssfsi+0x46>
 888:	66 0f       	add	r22, r22
 88a:	77 1f       	adc	r23, r23
 88c:	88 1f       	adc	r24, r24
 88e:	99 1f       	adc	r25, r25
 890:	1a f0       	brmi	.+6      	; 0x898 <__fixunssfsi+0x22>
 892:	ba 95       	dec	r27
 894:	c9 f7       	brne	.-14     	; 0x888 <__fixunssfsi+0x12>
 896:	12 c0       	rjmp	.+36     	; 0x8bc <__fixunssfsi+0x46>
 898:	b1 30       	cpi	r27, 0x01	; 1
 89a:	81 f0       	breq	.+32     	; 0x8bc <__fixunssfsi+0x46>
 89c:	9f d0       	rcall	.+318    	; 0x9dc <__fp_zero>
 89e:	b1 e0       	ldi	r27, 0x01	; 1
 8a0:	08 95       	ret
 8a2:	9c c0       	rjmp	.+312    	; 0x9dc <__fp_zero>
 8a4:	67 2f       	mov	r22, r23
 8a6:	78 2f       	mov	r23, r24
 8a8:	88 27       	eor	r24, r24
 8aa:	b8 5f       	subi	r27, 0xF8	; 248
 8ac:	39 f0       	breq	.+14     	; 0x8bc <__fixunssfsi+0x46>
 8ae:	b9 3f       	cpi	r27, 0xF9	; 249
 8b0:	cc f3       	brlt	.-14     	; 0x8a4 <__fixunssfsi+0x2e>
 8b2:	86 95       	lsr	r24
 8b4:	77 95       	ror	r23
 8b6:	67 95       	ror	r22
 8b8:	b3 95       	inc	r27
 8ba:	d9 f7       	brne	.-10     	; 0x8b2 <__fixunssfsi+0x3c>
 8bc:	3e f4       	brtc	.+14     	; 0x8cc <__fixunssfsi+0x56>
 8be:	90 95       	com	r25
 8c0:	80 95       	com	r24
 8c2:	70 95       	com	r23
 8c4:	61 95       	neg	r22
 8c6:	7f 4f       	sbci	r23, 0xFF	; 255
 8c8:	8f 4f       	sbci	r24, 0xFF	; 255
 8ca:	9f 4f       	sbci	r25, 0xFF	; 255
 8cc:	08 95       	ret

000008ce <__floatunsisf>:
 8ce:	e8 94       	clt
 8d0:	09 c0       	rjmp	.+18     	; 0x8e4 <__floatsisf+0x12>

000008d2 <__floatsisf>:
 8d2:	97 fb       	bst	r25, 7
 8d4:	3e f4       	brtc	.+14     	; 0x8e4 <__floatsisf+0x12>
 8d6:	90 95       	com	r25
 8d8:	80 95       	com	r24
 8da:	70 95       	com	r23
 8dc:	61 95       	neg	r22
 8de:	7f 4f       	sbci	r23, 0xFF	; 255
 8e0:	8f 4f       	sbci	r24, 0xFF	; 255
 8e2:	9f 4f       	sbci	r25, 0xFF	; 255
 8e4:	99 23       	and	r25, r25
 8e6:	a9 f0       	breq	.+42     	; 0x912 <__floatsisf+0x40>
 8e8:	f9 2f       	mov	r31, r25
 8ea:	96 e9       	ldi	r25, 0x96	; 150
 8ec:	bb 27       	eor	r27, r27
 8ee:	93 95       	inc	r25
 8f0:	f6 95       	lsr	r31
 8f2:	87 95       	ror	r24
 8f4:	77 95       	ror	r23
 8f6:	67 95       	ror	r22
 8f8:	b7 95       	ror	r27
 8fa:	f1 11       	cpse	r31, r1
 8fc:	f8 cf       	rjmp	.-16     	; 0x8ee <__floatsisf+0x1c>
 8fe:	fa f4       	brpl	.+62     	; 0x93e <__floatsisf+0x6c>
 900:	bb 0f       	add	r27, r27
 902:	11 f4       	brne	.+4      	; 0x908 <__floatsisf+0x36>
 904:	60 ff       	sbrs	r22, 0
 906:	1b c0       	rjmp	.+54     	; 0x93e <__floatsisf+0x6c>
 908:	6f 5f       	subi	r22, 0xFF	; 255
 90a:	7f 4f       	sbci	r23, 0xFF	; 255
 90c:	8f 4f       	sbci	r24, 0xFF	; 255
 90e:	9f 4f       	sbci	r25, 0xFF	; 255
 910:	16 c0       	rjmp	.+44     	; 0x93e <__floatsisf+0x6c>
 912:	88 23       	and	r24, r24
 914:	11 f0       	breq	.+4      	; 0x91a <__floatsisf+0x48>
 916:	96 e9       	ldi	r25, 0x96	; 150
 918:	11 c0       	rjmp	.+34     	; 0x93c <__floatsisf+0x6a>
 91a:	77 23       	and	r23, r23
 91c:	21 f0       	breq	.+8      	; 0x926 <__floatsisf+0x54>
 91e:	9e e8       	ldi	r25, 0x8E	; 142
 920:	87 2f       	mov	r24, r23
 922:	76 2f       	mov	r23, r22
 924:	05 c0       	rjmp	.+10     	; 0x930 <__floatsisf+0x5e>
 926:	66 23       	and	r22, r22
 928:	71 f0       	breq	.+28     	; 0x946 <__floatsisf+0x74>
 92a:	96 e8       	ldi	r25, 0x86	; 134
 92c:	86 2f       	mov	r24, r22
 92e:	70 e0       	ldi	r23, 0x00	; 0
 930:	60 e0       	ldi	r22, 0x00	; 0
 932:	2a f0       	brmi	.+10     	; 0x93e <__floatsisf+0x6c>
 934:	9a 95       	dec	r25
 936:	66 0f       	add	r22, r22
 938:	77 1f       	adc	r23, r23
 93a:	88 1f       	adc	r24, r24
 93c:	da f7       	brpl	.-10     	; 0x934 <__floatsisf+0x62>
 93e:	88 0f       	add	r24, r24
 940:	96 95       	lsr	r25
 942:	87 95       	ror	r24
 944:	97 f9       	bld	r25, 7
 946:	08 95       	ret

00000948 <__fp_inf>:
 948:	97 f9       	bld	r25, 7
 94a:	9f 67       	ori	r25, 0x7F	; 127
 94c:	80 e8       	ldi	r24, 0x80	; 128
 94e:	70 e0       	ldi	r23, 0x00	; 0
 950:	60 e0       	ldi	r22, 0x00	; 0
 952:	08 95       	ret

00000954 <__fp_nan>:
 954:	9f ef       	ldi	r25, 0xFF	; 255
 956:	80 ec       	ldi	r24, 0xC0	; 192
 958:	08 95       	ret

0000095a <__fp_pscA>:
 95a:	00 24       	eor	r0, r0
 95c:	0a 94       	dec	r0
 95e:	16 16       	cp	r1, r22
 960:	17 06       	cpc	r1, r23
 962:	18 06       	cpc	r1, r24
 964:	09 06       	cpc	r0, r25
 966:	08 95       	ret

00000968 <__fp_pscB>:
 968:	00 24       	eor	r0, r0
 96a:	0a 94       	dec	r0
 96c:	12 16       	cp	r1, r18
 96e:	13 06       	cpc	r1, r19
 970:	14 06       	cpc	r1, r20
 972:	05 06       	cpc	r0, r21
 974:	08 95       	ret

00000976 <__fp_round>:
 976:	09 2e       	mov	r0, r25
 978:	03 94       	inc	r0
 97a:	00 0c       	add	r0, r0
 97c:	11 f4       	brne	.+4      	; 0x982 <__fp_round+0xc>
 97e:	88 23       	and	r24, r24
 980:	52 f0       	brmi	.+20     	; 0x996 <__fp_round+0x20>
 982:	bb 0f       	add	r27, r27
 984:	40 f4       	brcc	.+16     	; 0x996 <__fp_round+0x20>
 986:	bf 2b       	or	r27, r31
 988:	11 f4       	brne	.+4      	; 0x98e <__fp_round+0x18>
 98a:	60 ff       	sbrs	r22, 0
 98c:	04 c0       	rjmp	.+8      	; 0x996 <__fp_round+0x20>
 98e:	6f 5f       	subi	r22, 0xFF	; 255
 990:	7f 4f       	sbci	r23, 0xFF	; 255
 992:	8f 4f       	sbci	r24, 0xFF	; 255
 994:	9f 4f       	sbci	r25, 0xFF	; 255
 996:	08 95       	ret

00000998 <__fp_split3>:
 998:	57 fd       	sbrc	r21, 7
 99a:	90 58       	subi	r25, 0x80	; 128
 99c:	44 0f       	add	r20, r20
 99e:	55 1f       	adc	r21, r21
 9a0:	59 f0       	breq	.+22     	; 0x9b8 <__fp_splitA+0x10>
 9a2:	5f 3f       	cpi	r21, 0xFF	; 255
 9a4:	71 f0       	breq	.+28     	; 0x9c2 <__fp_splitA+0x1a>
 9a6:	47 95       	ror	r20

000009a8 <__fp_splitA>:
 9a8:	88 0f       	add	r24, r24
 9aa:	97 fb       	bst	r25, 7
 9ac:	99 1f       	adc	r25, r25
 9ae:	61 f0       	breq	.+24     	; 0x9c8 <__fp_splitA+0x20>
 9b0:	9f 3f       	cpi	r25, 0xFF	; 255
 9b2:	79 f0       	breq	.+30     	; 0x9d2 <__fp_splitA+0x2a>
 9b4:	87 95       	ror	r24
 9b6:	08 95       	ret
 9b8:	12 16       	cp	r1, r18
 9ba:	13 06       	cpc	r1, r19
 9bc:	14 06       	cpc	r1, r20
 9be:	55 1f       	adc	r21, r21
 9c0:	f2 cf       	rjmp	.-28     	; 0x9a6 <__fp_split3+0xe>
 9c2:	46 95       	lsr	r20
 9c4:	f1 df       	rcall	.-30     	; 0x9a8 <__fp_splitA>
 9c6:	08 c0       	rjmp	.+16     	; 0x9d8 <__fp_splitA+0x30>
 9c8:	16 16       	cp	r1, r22
 9ca:	17 06       	cpc	r1, r23
 9cc:	18 06       	cpc	r1, r24
 9ce:	99 1f       	adc	r25, r25
 9d0:	f1 cf       	rjmp	.-30     	; 0x9b4 <__fp_splitA+0xc>
 9d2:	86 95       	lsr	r24
 9d4:	71 05       	cpc	r23, r1
 9d6:	61 05       	cpc	r22, r1
 9d8:	08 94       	sec
 9da:	08 95       	ret

000009dc <__fp_zero>:
 9dc:	e8 94       	clt

000009de <__fp_szero>:
 9de:	bb 27       	eor	r27, r27
 9e0:	66 27       	eor	r22, r22
 9e2:	77 27       	eor	r23, r23
 9e4:	cb 01       	movw	r24, r22
 9e6:	97 f9       	bld	r25, 7
 9e8:	08 95       	ret

000009ea <__mulsf3>:
 9ea:	0b d0       	rcall	.+22     	; 0xa02 <__mulsf3x>
 9ec:	c4 cf       	rjmp	.-120    	; 0x976 <__fp_round>
 9ee:	b5 df       	rcall	.-150    	; 0x95a <__fp_pscA>
 9f0:	28 f0       	brcs	.+10     	; 0x9fc <__mulsf3+0x12>
 9f2:	ba df       	rcall	.-140    	; 0x968 <__fp_pscB>
 9f4:	18 f0       	brcs	.+6      	; 0x9fc <__mulsf3+0x12>
 9f6:	95 23       	and	r25, r21
 9f8:	09 f0       	breq	.+2      	; 0x9fc <__mulsf3+0x12>
 9fa:	a6 cf       	rjmp	.-180    	; 0x948 <__fp_inf>
 9fc:	ab cf       	rjmp	.-170    	; 0x954 <__fp_nan>
 9fe:	11 24       	eor	r1, r1
 a00:	ee cf       	rjmp	.-36     	; 0x9de <__fp_szero>

00000a02 <__mulsf3x>:
 a02:	ca df       	rcall	.-108    	; 0x998 <__fp_split3>
 a04:	a0 f3       	brcs	.-24     	; 0x9ee <__mulsf3+0x4>

00000a06 <__mulsf3_pse>:
 a06:	95 9f       	mul	r25, r21
 a08:	d1 f3       	breq	.-12     	; 0x9fe <__mulsf3+0x14>
 a0a:	95 0f       	add	r25, r21
 a0c:	50 e0       	ldi	r21, 0x00	; 0
 a0e:	55 1f       	adc	r21, r21
 a10:	62 9f       	mul	r22, r18
 a12:	f0 01       	movw	r30, r0
 a14:	72 9f       	mul	r23, r18
 a16:	bb 27       	eor	r27, r27
 a18:	f0 0d       	add	r31, r0
 a1a:	b1 1d       	adc	r27, r1
 a1c:	63 9f       	mul	r22, r19
 a1e:	aa 27       	eor	r26, r26
 a20:	f0 0d       	add	r31, r0
 a22:	b1 1d       	adc	r27, r1
 a24:	aa 1f       	adc	r26, r26
 a26:	64 9f       	mul	r22, r20
 a28:	66 27       	eor	r22, r22
 a2a:	b0 0d       	add	r27, r0
 a2c:	a1 1d       	adc	r26, r1
 a2e:	66 1f       	adc	r22, r22
 a30:	82 9f       	mul	r24, r18
 a32:	22 27       	eor	r18, r18
 a34:	b0 0d       	add	r27, r0
 a36:	a1 1d       	adc	r26, r1
 a38:	62 1f       	adc	r22, r18
 a3a:	73 9f       	mul	r23, r19
 a3c:	b0 0d       	add	r27, r0
 a3e:	a1 1d       	adc	r26, r1
 a40:	62 1f       	adc	r22, r18
 a42:	83 9f       	mul	r24, r19
 a44:	a0 0d       	add	r26, r0
 a46:	61 1d       	adc	r22, r1
 a48:	22 1f       	adc	r18, r18
 a4a:	74 9f       	mul	r23, r20
 a4c:	33 27       	eor	r19, r19
 a4e:	a0 0d       	add	r26, r0
 a50:	61 1d       	adc	r22, r1
 a52:	23 1f       	adc	r18, r19
 a54:	84 9f       	mul	r24, r20
 a56:	60 0d       	add	r22, r0
 a58:	21 1d       	adc	r18, r1
 a5a:	82 2f       	mov	r24, r18
 a5c:	76 2f       	mov	r23, r22
 a5e:	6a 2f       	mov	r22, r26
 a60:	11 24       	eor	r1, r1
 a62:	9f 57       	subi	r25, 0x7F	; 127
 a64:	50 40       	sbci	r21, 0x00	; 0
 a66:	8a f0       	brmi	.+34     	; 0xa8a <__mulsf3_pse+0x84>
 a68:	e1 f0       	breq	.+56     	; 0xaa2 <__mulsf3_pse+0x9c>
 a6a:	88 23       	and	r24, r24
 a6c:	4a f0       	brmi	.+18     	; 0xa80 <__mulsf3_pse+0x7a>
 a6e:	ee 0f       	add	r30, r30
 a70:	ff 1f       	adc	r31, r31
 a72:	bb 1f       	adc	r27, r27
 a74:	66 1f       	adc	r22, r22
 a76:	77 1f       	adc	r23, r23
 a78:	88 1f       	adc	r24, r24
 a7a:	91 50       	subi	r25, 0x01	; 1
 a7c:	50 40       	sbci	r21, 0x00	; 0
 a7e:	a9 f7       	brne	.-22     	; 0xa6a <__mulsf3_pse+0x64>
 a80:	9e 3f       	cpi	r25, 0xFE	; 254
 a82:	51 05       	cpc	r21, r1
 a84:	70 f0       	brcs	.+28     	; 0xaa2 <__mulsf3_pse+0x9c>
 a86:	60 cf       	rjmp	.-320    	; 0x948 <__fp_inf>
 a88:	aa cf       	rjmp	.-172    	; 0x9de <__fp_szero>
 a8a:	5f 3f       	cpi	r21, 0xFF	; 255
 a8c:	ec f3       	brlt	.-6      	; 0xa88 <__mulsf3_pse+0x82>
 a8e:	98 3e       	cpi	r25, 0xE8	; 232
 a90:	dc f3       	brlt	.-10     	; 0xa88 <__mulsf3_pse+0x82>
 a92:	86 95       	lsr	r24
 a94:	77 95       	ror	r23
 a96:	67 95       	ror	r22
 a98:	b7 95       	ror	r27
 a9a:	f7 95       	ror	r31
 a9c:	e7 95       	ror	r30
 a9e:	9f 5f       	subi	r25, 0xFF	; 255
 aa0:	c1 f7       	brne	.-16     	; 0xa92 <__mulsf3_pse+0x8c>
 aa2:	fe 2b       	or	r31, r30
 aa4:	88 0f       	add	r24, r24
 aa6:	91 1d       	adc	r25, r1
 aa8:	96 95       	lsr	r25
 aaa:	87 95       	ror	r24
 aac:	97 f9       	bld	r25, 7
 aae:	08 95       	ret

00000ab0 <__tablejump2__>:
 ab0:	ee 0f       	add	r30, r30
 ab2:	ff 1f       	adc	r31, r31
 ab4:	88 1f       	adc	r24, r24
 ab6:	8b bf       	out	0x3b, r24	; 59
 ab8:	07 90       	elpm	r0, Z+
 aba:	f6 91       	elpm	r31, Z
 abc:	e0 2d       	mov	r30, r0
 abe:	19 94       	eijmp

00000ac0 <__umulhisi3>:
 ac0:	a2 9f       	mul	r26, r18
 ac2:	b0 01       	movw	r22, r0
 ac4:	b3 9f       	mul	r27, r19
 ac6:	c0 01       	movw	r24, r0
 ac8:	a3 9f       	mul	r26, r19
 aca:	70 0d       	add	r23, r0
 acc:	81 1d       	adc	r24, r1
 ace:	11 24       	eor	r1, r1
 ad0:	91 1d       	adc	r25, r1
 ad2:	b2 9f       	mul	r27, r18
 ad4:	70 0d       	add	r23, r0
 ad6:	81 1d       	adc	r24, r1
 ad8:	11 24       	eor	r1, r1
 ada:	91 1d       	adc	r25, r1
 adc:	08 95       	ret

00000ade <_exit>:
 ade:	f8 94       	cli

00000ae0 <__stop_program>:
 ae0:	ff cf       	rjmp	.-2      	; 0xae0 <__stop_program>
